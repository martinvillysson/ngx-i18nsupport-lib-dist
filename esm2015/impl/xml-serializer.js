/**
 * An XmlSerializer that supports formatting.
 * Original code is based on [xmldom](https://www.npmjs.com/package/xmldom)
 * It is extended to support formatting including handling of elements with mixed content.
 * Example formatted output:
 * <pre>
 *     <doc>
 *         <element>An element with
 *             <b>mixed</b>
 *              content
 *         </element>
 *     </doc>
 * </pre>
 * Same when "element" is indicated as "mixedContentElement":
 * <pre>
 *     <doc>
 *         <element>An element with <b>mixed</b> content</element>
 *     </doc>
 * </pre>
 */
const DEFAULT_INDENT_STRING = '  ';
export class XmlSerializer {
    constructor() {
    }
    /**
     * Serialze xml document to string.
     * @param document the document
     * @param options can be used to activate beautifying.
     */
    serializeToString(document, options) {
        const buf = [];
        let visibleNamespaces = [];
        const refNode = document.documentElement;
        let prefix = refNode.prefix;
        const uri = refNode.namespaceURI;
        if (uri && prefix == null) {
            prefix = refNode.lookupPrefix(uri);
            if (prefix == null) {
                visibleNamespaces = [
                    { namespace: uri, prefix: null }
                    // {namespace:uri,prefix:''}
                ];
            }
        }
        if (!options) {
            options = {};
        }
        if (options.indentString) {
            if (!this.containsOnlyWhiteSpace(options.indentString)) {
                throw new Error('indentString must not contain non white characters');
            }
        }
        this.doSerializeToString(document, options, buf, 0, false, visibleNamespaces);
        return buf.join('');
    }
    /**
     * Main format method that does all the work.
     * Outputs a node to the outputbuffer.
     * @param node the node to be formatted.
     * @param options options
     * @param buf outputbuffer, new output will be appended to this array.
     * @param indentLevel Lever of indentation for formatted output.
     * @param partOfMixedContent true, if node is a subelement of an element containind mixed content.
     * @param visibleNamespaces visibleNamespaces
     */
    doSerializeToString(node, options, buf, indentLevel, partOfMixedContent, visibleNamespaces) {
        let child;
        switch (node.nodeType) {
            case node.ELEMENT_NODE:
                const elementNode = node;
                const attrs = elementNode.attributes;
                const len = attrs.length;
                child = elementNode.firstChild;
                const nodeName = elementNode.tagName;
                const elementHasMixedContent = this.isMixedContentElement(nodeName, options);
                if (partOfMixedContent) {
                    buf.push('<', nodeName);
                }
                else {
                    this.outputIndented(options, buf, indentLevel, '<', nodeName);
                }
                for (let i = 0; i < len; i++) {
                    // add namespaces for attributes
                    const attr = attrs.item(i);
                    if (attr.prefix === 'xmlns') {
                        visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
                    }
                    else if (attr.nodeName === 'xmlns') {
                        visibleNamespaces.push({ prefix: '', namespace: attr.value });
                    }
                }
                for (let i = 0; i < len; i++) {
                    const attr = attrs.item(i);
                    if (this.needNamespaceDefine(attr, visibleNamespaces)) {
                        const prefix = attr.prefix || '';
                        const uri = attr.namespaceURI;
                        const ns = prefix ? ' xmlns:' + prefix : ' xmlns';
                        buf.push(ns, '="', uri, '"');
                        visibleNamespaces.push({ prefix: prefix, namespace: uri });
                    }
                    this.doSerializeToString(attr, options, buf, indentLevel, false, visibleNamespaces);
                }
                // add namespace for current node
                if (this.needNamespaceDefine(elementNode, visibleNamespaces)) {
                    const prefix = elementNode.prefix || '';
                    const uri = node.namespaceURI;
                    const ns = prefix ? ' xmlns:' + prefix : ' xmlns';
                    buf.push(ns, '="', uri, '"');
                    visibleNamespaces.push({ prefix: prefix, namespace: uri });
                }
                if (child) {
                    buf.push('>');
                    // if is cdata child node
                    let hasComplexContent = false;
                    while (child) {
                        if (child.nodeType === child.ELEMENT_NODE) {
                            hasComplexContent = true;
                        }
                        this.doSerializeToString(child, options, buf, indentLevel + 1, partOfMixedContent || elementHasMixedContent, visibleNamespaces);
                        child = child.nextSibling;
                    }
                    if (!partOfMixedContent && !elementHasMixedContent && hasComplexContent) {
                        this.outputIndented(options, buf, indentLevel, '</', nodeName, '>');
                    }
                    else {
                        buf.push('</', nodeName, '>');
                    }
                }
                else {
                    buf.push('/>');
                }
                return;
            case node.DOCUMENT_NODE:
            case node.DOCUMENT_FRAGMENT_NODE:
                child = node.firstChild;
                while (child) {
                    this.doSerializeToString(child, options, buf, indentLevel, false, visibleNamespaces);
                    child = child.nextSibling;
                }
                return;
            case node.ATTRIBUTE_NODE:
                const attrNode = node;
                return buf.push(' ', attrNode.name, '="', attrNode.value.replace(/[<&"]/g, this._xmlEncoder), '"');
            case node.TEXT_NODE:
                const textNode = node;
                if (!options.beautify || partOfMixedContent || !this.containsOnlyWhiteSpace(textNode.data)) {
                    return buf.push(textNode.data.replace(/[<&]/g, this._xmlEncoder));
                }
                return;
            case node.CDATA_SECTION_NODE:
                const cdatasectionNode = node;
                return buf.push('<![CDATA[', cdatasectionNode.data, ']]>');
            case node.COMMENT_NODE:
                const commentNode = node;
                return buf.push('<!--', commentNode.data, '-->');
            case node.DOCUMENT_TYPE_NODE:
                const documenttypeNode = node;
                const pubid = documenttypeNode.publicId;
                const sysid = documenttypeNode.systemId;
                buf.push('<!DOCTYPE ', documenttypeNode.name);
                if (pubid) {
                    buf.push(' PUBLIC "', pubid);
                    if (sysid && sysid !== '.') {
                        buf.push('" "', sysid);
                    }
                    buf.push('">');
                }
                else if (sysid && sysid !== '.') {
                    buf.push(' SYSTEM "', sysid, '">');
                }
                else {
                    buf.push('>');
                }
                return;
            case node.PROCESSING_INSTRUCTION_NODE:
                const piNode = node;
                return buf.push('<?', piNode.target, ' ', piNode.data, '?>');
            case node.ENTITY_REFERENCE_NODE:
                return buf.push('&', node.nodeName, ';');
            // case ENTITY_NODE:
            // case NOTATION_NODE:
            default:
                buf.push('??', node.nodeName);
        }
    }
    needNamespaceDefine(node, visibleNamespaces) {
        const prefix = node.prefix || '';
        const uri = node.namespaceURI;
        if (!prefix && !uri) {
            return false;
        }
        if (prefix === 'xml' && uri === 'http://www.w3.org/XML/1998/namespace'
            || uri === 'http://www.w3.org/2000/xmlns/') {
            return false;
        }
        let i = visibleNamespaces.length;
        while (i--) {
            const ns = visibleNamespaces[i];
            // get namespace prefix
            if (ns.prefix === prefix) {
                return ns.namespace !== uri;
            }
        }
        return true;
    }
    _xmlEncoder(c) {
        return c === '<' && '&lt;' ||
            c === '>' && '&gt;' ||
            c === '&' && '&amp;' ||
            c === '"' && '&quot;' ||
            '&#' + c.charCodeAt(0) + ';';
    }
    outputIndented(options, buf, indentLevel, ...outputParts) {
        if (options.beautify) {
            buf.push('\n');
            if (indentLevel > 0) {
                buf.push(this.indentationString(options, indentLevel));
            }
        }
        buf.push(...outputParts);
    }
    indentationString(options, indentLevel) {
        const indent = (options.indentString) ? options.indentString : DEFAULT_INDENT_STRING;
        let result = '';
        for (let i = 0; i < indentLevel; i++) {
            result = result + indent;
        }
        return result;
    }
    /**
     * Test, wether tagName is an element containing mixed content.
     * @param tagName tagName
     * @param options options
     */
    isMixedContentElement(tagName, options) {
        if (options && options.mixedContentElements) {
            return !!options.mixedContentElements.find((tag) => tag === tagName);
        }
        else {
            return false;
        }
    }
    containsOnlyWhiteSpace(text) {
        for (let i = 0; i < text.length; i++) {
            const c = text.charAt(i);
            if (!(c === ' ' || c === '\t' || c === '\r' || c === '\n')) {
                return false;
            }
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sLXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaTE4bnN1cHBvcnQtbGliL3NyYy9pbXBsL3htbC1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBZ0JILE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDO0FBRW5DLE1BQU0sT0FBTyxhQUFhO0lBRXRCO0lBRUEsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxpQkFBaUIsQ0FBQyxRQUFrQixFQUFFLE9BQThCO1FBQ2hFLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksaUJBQWlCLEdBQWdCLEVBQUUsQ0FBQztRQUN4QyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDO1FBQ3pDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDNUIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUVqQyxJQUFJLEdBQUcsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ3ZCLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtnQkFDaEIsaUJBQWlCLEdBQUc7b0JBQ2hCLEVBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDO29CQUM5Qiw0QkFBNEI7aUJBQy9CLENBQUM7YUFDTDtTQUNKO1FBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLE9BQU8sR0FBRyxFQUFFLENBQUM7U0FDaEI7UUFDRCxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ3BELE1BQU0sSUFBSSxLQUFLLENBQUMs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LEVBQUU7WUFDbEMsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDNUI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLHFCQUFxQixDQUFDLE9BQWUsRUFBRSxPQUE2QjtRQUN4RSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsb0JBQW9CLEVBQUU7WUFDekMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxDQUFDO1NBQ3hFO2FBQU07WUFDSCxPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxJQUFZO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLEtBQUssQ0FBQzthQUNoQjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFuIFhtbFNlcmlhbGl6ZXIgdGhhdCBzdXBwb3J0cyBmb3JtYXR0aW5nLlxyXG4gKiBPcmlnaW5hbCBjb2RlIGlzIGJhc2VkIG9uIFt4bWxkb21dKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3htbGRvbSlcclxuICogSXQgaXMgZXh0ZW5kZWQgdG8gc3VwcG9ydCBmb3JtYXR0aW5nIGluY2x1ZGluZyBoYW5kbGluZyBvZiBlbGVtZW50cyB3aXRoIG1peGVkIGNvbnRlbnQuXHJcbiAqIEV4YW1wbGUgZm9ybWF0dGVkIG91dHB1dDpcclxuICogPHByZT5cclxuICogICAgIDxkb2M+XHJcbiAqICAgICAgICAgPGVsZW1lbnQ+QW4gZWxlbWVudCB3aXRoXHJcbiAqICAgICAgICAgICAgIDxiPm1peGVkPC9iPlxyXG4gKiAgICAgICAgICAgICAgY29udGVudFxyXG4gKiAgICAgICAgIDwvZWxlbWVudD5cclxuICogICAgIDwvZG9jPlxyXG4gKiA8L3ByZT5cclxuICogU2FtZSB3aGVuIFwiZWxlbWVudFwiIGlzIGluZGljYXRlZCBhcyBcIm1peGVkQ29udGVudEVsZW1lbnRcIjpcclxuICogPHByZT5cclxuICogICAgIDxkb2M+XHJcbiAqICAgICAgICAgPGVsZW1lbnQ+QW4gZWxlbWVudCB3aXRoIDxiPm1peGVkPC9iPiBjb250ZW50PC9lbGVtZW50PlxyXG4gKiAgICAgPC9kb2M+XHJcbiAqIDwvcHJlPlxyXG4gKi9cclxuXHJcbmludGVyZmFjZSBOYW1lc3BhY2Uge1xyXG4gICAgcHJlZml4OiBzdHJpbmc7XHJcbiAgICBuYW1lc3BhY2U6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgdXNlZCB0byBjb250cm9sIHRoZSBmb3JtYXR0aW5nXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFhtbFNlcmlhbGl6ZXJPcHRpb25zIHtcclxuICAgIGJlYXV0aWZ5PzogYm9vbGVhbjsgLy8gc2V0IHRvIGFjdGl2YXRlIGJlYXV0aWZ5XHJcbiAgICBpbmRlbnRTdHJpbmc/OiBzdHJpbmc7IC8vIFNlcXVlbmNlIHVzZXMgZm9yIGluZGVudGF0aW9uLCBtdXN0IG9ubHkgY29udGFpbiB3aGl0ZSBzcGFjZSBjaGFycywgZS5nLiBcIiAgXCIgb3IgXCIgICAgXCIgb3IgXCJcXHRcIlxyXG4gICAgbWl4ZWRDb250ZW50RWxlbWVudHM/OiBzdHJpbmdbXTsgLy8gTmFtZXMgb2YgZWxlbWVudHMgY29udGFpbmluZyBtaXhlZCBjb250ZW50ICh0aGVzZSBhcmUgbm90IGJlYXV0aWZpZWQpXHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfSU5ERU5UX1NUUklORyA9ICcgICc7XHJcblxyXG5leHBvcnQgY2xhc3MgWG1sU2VyaWFsaXplciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VyaWFsemUgeG1sIGRvY3VtZW50IHRvIHN0cmluZy5cclxuICAgICAqIEBwYXJhbSBkb2N1bWVudCB0aGUgZG9jdW1lbnRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNhbiBiZSB1c2VkIHRvIGFjdGl2YXRlIGJlYXV0aWZ5aW5nLlxyXG4gICAgICovXHJcbiAgICBzZXJpYWxpemVUb1N0cmluZyhkb2N1bWVudDogRG9jdW1lbnQsIG9wdGlvbnM/OiBYbWxTZXJpYWxpemVyT3B0aW9ucyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYnVmID0gW107XHJcbiAgICAgICAgbGV0IHZpc2libGVOYW1lc3BhY2VzOiBOYW1lc3BhY2VbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHJlZk5vZGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgICAgbGV0IHByZWZpeCA9IHJlZk5vZGUucHJlZml4O1xyXG4gICAgICAgIGNvbnN0IHVyaSA9IHJlZk5vZGUubmFtZXNwYWNlVVJJO1xyXG5cclxuICAgICAgICBpZiAodXJpICYmIHByZWZpeCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHByZWZpeCA9IHJlZk5vZGUubG9va3VwUHJlZml4KHVyaSk7XHJcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJsZU5hbWVzcGFjZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAge25hbWVzcGFjZTogdXJpLCBwcmVmaXg6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8ge25hbWVzcGFjZTp1cmkscHJlZml4OicnfVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5pbmRlbnRTdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zT25seVdoaXRlU3BhY2Uob3B0aW9ucy5pbmRlbnRTdHJpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luZGVudFN0cmluZyBtdXN0IG5vdCBjb250YWluIG5vbiB3aGl0ZSBjaGFyYWN0ZXJzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kb1NlcmlhbGl6ZVRvU3RyaW5nKGRvY3VtZW50LCBvcHRpb25zLCBidWYsIDAsIGZhbHNlLCB2aXNpYmxlTmFtZXNwYWNlcyk7XHJcbiAgICAgICAgcmV0dXJuIGJ1Zi5qb2luKCcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1haW4gZm9ybWF0IG1ldGhvZCB0aGF0IGRvZXMgYWxsIHRoZSB3b3JrLlxyXG4gICAgICogT3V0cHV0cyBhIG5vZGUgdG8gdGhlIG91dHB1dGJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRvIGJlIGZvcm1hdHRlZC5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSBidWYgb3V0cHV0YnVmZmVyLCBuZXcgb3V0cHV0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhpcyBhcnJheS5cclxuICAgICAqIEBwYXJhbSBpbmRlbnRMZXZlbCBMZXZlciBvZiBpbmRlbnRhdGlvbiBmb3IgZm9ybWF0dGVkIG91dHB1dC5cclxuICAgICAqIEBwYXJhbSBwYXJ0T2ZNaXhlZENvbnRlbnQgdHJ1ZSwgaWYgbm9kZSBpcyBhIHN1YmVsZW1lbnQgb2YgYW4gZWxlbWVudCBjb250YWluaW5kIG1peGVkIGNvbnRlbnQuXHJcbiAgICAgKiBAcGFyYW0gdmlzaWJsZU5hbWVzcGFjZXMgdmlzaWJsZU5hbWVzcGFjZXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBkb1NlcmlhbGl6ZVRvU3RyaW5nKG5vZGU6IE5vZGUsIG9wdGlvbnM6IFhtbFNlcmlhbGl6ZXJPcHRpb25zLCBidWY6IHN0cmluZ1tdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudExldmVsOiBudW1iZXIsIHBhcnRPZk1peGVkQ29udGVudDogYm9vbGVhbiwgdmlzaWJsZU5hbWVzcGFjZXM6IE5hbWVzcGFjZVtdKSB7XHJcbiAgICAgICAgbGV0IGNoaWxkOiBOb2RlO1xyXG4gICAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIG5vZGUuRUxFTUVOVF9OT0RFOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudE5vZGU6IEVsZW1lbnQgPSA8RWxlbWVudD4gbm9kZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gZWxlbWVudE5vZGUuYXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbiA9IGF0dHJzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGNoaWxkID0gZWxlbWVudE5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudE5vZGUudGFnTmFtZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRIYXNNaXhlZENvbnRlbnQgPSB0aGlzLmlzTWl4ZWRDb250ZW50RWxlbWVudChub2RlTmFtZSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydE9mTWl4ZWRDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2goJzwnICwgbm9kZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm91dHB1dEluZGVudGVkKG9wdGlvbnMsIGJ1ZiwgaW5kZW50TGV2ZWwsICc8JyAsIG5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIG5hbWVzcGFjZXMgZm9yIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gYXR0cnMuaXRlbShpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ci5wcmVmaXggPT09ICd4bWxucycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7cHJlZml4OiBhdHRyLmxvY2FsTmFtZSwgbmFtZXNwYWNlOiBhdHRyLnZhbHVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyLm5vZGVOYW1lID09PSAneG1sbnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGVOYW1lc3BhY2VzLnB1c2goe3ByZWZpeDogJycsIG5hbWVzcGFjZTogYXR0ci52YWx1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gYXR0cnMuaXRlbShpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uZWVkTmFtZXNwYWNlRGVmaW5lKGF0dHIsIHZpc2libGVOYW1lc3BhY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmaXggPSBhdHRyLnByZWZpeCB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJpID0gYXR0ci5uYW1lc3BhY2VVUkk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5zID0gcHJlZml4ID8gJyB4bWxuczonICsgcHJlZml4IDogJyB4bWxucyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKG5zLCAnPVwiJywgdXJpLCAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7cHJlZml4OiBwcmVmaXgsIG5hbWVzcGFjZTogdXJpfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9TZXJpYWxpemVUb1N0cmluZyhhdHRyLCBvcHRpb25zLCBidWYsIGluZGVudExldmVsLCBmYWxzZSwgdmlzaWJsZU5hbWVzcGFjZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYWRkIG5hbWVzcGFjZSBmb3IgY3VycmVudCBub2RlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZWVkTmFtZXNwYWNlRGVmaW5lKGVsZW1lbnROb2RlLCB2aXNpYmxlTmFtZXNwYWNlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmaXggPSBlbGVtZW50Tm9kZS5wcmVmaXggfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJpID0gbm9kZS5uYW1lc3BhY2VVUkk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnMgPSBwcmVmaXggPyAnIHhtbG5zOicgKyBwcmVmaXggOiAnIHhtbG5zJztcclxuICAgICAgICAgICAgICAgICAgICBidWYucHVzaChucywgJz1cIicsIHVyaSwgJ1wiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7cHJlZml4OiBwcmVmaXgsIG5hbWVzcGFjZTogdXJpfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2goJz4nKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBpcyBjZGF0YSBjaGlsZCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhhc0NvbXBsZXhDb250ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gY2hpbGQuRUxFTUVOVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDb21wbGV4Q29udGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLCBvcHRpb25zLCBidWYsIGluZGVudExldmVsICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRPZk1peGVkQ29udGVudCB8fCBlbGVtZW50SGFzTWl4ZWRDb250ZW50LCB2aXNpYmxlTmFtZXNwYWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFydE9mTWl4ZWRDb250ZW50ICYmICFlbGVtZW50SGFzTWl4ZWRDb250ZW50ICYmIGhhc0NvbXBsZXhDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0SW5kZW50ZWQob3B0aW9ucywgYnVmLCBpbmRlbnRMZXZlbCwgJzwvJywgbm9kZU5hbWUsICc+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2goJzwvJywgbm9kZU5hbWUsICc+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBidWYucHVzaCgnLz4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBub2RlLkRPQ1VNRU5UX05PREU6XHJcbiAgICAgICAgICAgIGNhc2Ugbm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxyXG4gICAgICAgICAgICAgICAgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvU2VyaWFsaXplVG9TdHJpbmcoY2hpbGQsIG9wdGlvbnMsIGJ1ZiwgaW5kZW50TGV2ZWwsIGZhbHNlLCB2aXNpYmxlTmFtZXNwYWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBub2RlLkFUVFJJQlVURV9OT0RFOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ck5vZGUgPSA8QXR0cj4gbm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBidWYucHVzaCgnICcsIGF0dHJOb2RlLm5hbWUsICc9XCInLCBhdHRyTm9kZS52YWx1ZS5yZXBsYWNlKC9bPCZcIl0vZywgdGhpcy5feG1sRW5jb2RlciksICdcIicpO1xyXG4gICAgICAgICAgICBjYXNlIG5vZGUuVEVYVF9OT0RFOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dE5vZGUgPSA8VGV4dD4gbm9kZTtcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5iZWF1dGlmeSB8fCBwYXJ0T2ZNaXhlZENvbnRlbnQgfHwgIXRoaXMuY29udGFpbnNPbmx5V2hpdGVTcGFjZSh0ZXh0Tm9kZS5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidWYucHVzaCh0ZXh0Tm9kZS5kYXRhLnJlcGxhY2UoL1s8Jl0vZywgdGhpcy5feG1sRW5jb2RlcikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjYXNlIG5vZGUuQ0RBVEFfU0VDVElPTl9OT0RFOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2RhdGFzZWN0aW9uTm9kZSA9IDxDREFUQVNlY3Rpb24+IG5vZGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmLnB1c2goJzwhW0NEQVRBWycsIGNkYXRhc2VjdGlvbk5vZGUuZGF0YSwgJ11dPicpO1xyXG4gICAgICAgICAgICBjYXNlIG5vZGUuQ09NTUVOVF9OT0RFOlxyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWVudE5vZGUgPSA8Q29tbWVudD4gbm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBidWYucHVzaCgnPCEtLScsIGNvbW1lbnROb2RlLmRhdGEsICctLT4nKTtcclxuICAgICAgICAgICAgY2FzZSBub2RlLkRPQ1VNRU5UX1RZUEVfTk9ERTpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50dHlwZU5vZGUgPSA8RG9jdW1lbnRUeXBlPiBub2RlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHViaWQgPSBkb2N1bWVudHR5cGVOb2RlLnB1YmxpY0lkO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3lzaWQgPSBkb2N1bWVudHR5cGVOb2RlLnN5c3RlbUlkO1xyXG4gICAgICAgICAgICAgICAgYnVmLnB1c2goJzwhRE9DVFlQRSAnLCBkb2N1bWVudHR5cGVOb2RlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHB1YmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2goJyBQVUJMSUMgXCInLCBwdWJpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN5c2lkICYmIHN5c2lkICE9PSAnLicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2goJ1wiIFwiJywgc3lzaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBidWYucHVzaCgnXCI+Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN5c2lkICYmIHN5c2lkICE9PSAnLicpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWYucHVzaCgnIFNZU1RFTSBcIicsIHN5c2lkLCAnXCI+Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKCc+Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2Ugbm9kZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwaU5vZGUgPSA8UHJvY2Vzc2luZ0luc3RydWN0aW9uPiBub2RlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1Zi5wdXNoKCAnPD8nLCBwaU5vZGUudGFyZ2V0LCAnICcsIHBpTm9kZS5kYXRhLCAnPz4nKTtcclxuICAgICAgICAgICAgY2FzZSBub2RlLkVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBidWYucHVzaCgnJicsIG5vZGUubm9kZU5hbWUsICc7Jyk7XHJcbiAgICAgICAgICAgIC8vIGNhc2UgRU5USVRZX05PREU6XHJcbiAgICAgICAgICAgIC8vIGNhc2UgTk9UQVRJT05fTk9ERTpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKCc/PycsIG5vZGUubm9kZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG5lZWROYW1lc3BhY2VEZWZpbmUobm9kZTogRWxlbWVudCB8IEF0dHIsIHZpc2libGVOYW1lc3BhY2VzOiBOYW1lc3BhY2VbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHByZWZpeCA9IG5vZGUucHJlZml4IHx8ICcnO1xyXG4gICAgICAgIGNvbnN0IHVyaSA9IG5vZGUubmFtZXNwYWNlVVJJO1xyXG4gICAgICAgIGlmICghcHJlZml4ICYmICF1cmkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJlZml4ID09PSAneG1sJyAmJiB1cmkgPT09ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnXHJcbiAgICAgICAgICAgIHx8IHVyaSA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaSA9IHZpc2libGVOYW1lc3BhY2VzLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5zID0gdmlzaWJsZU5hbWVzcGFjZXNbaV07XHJcbiAgICAgICAgICAgIC8vIGdldCBuYW1lc3BhY2UgcHJlZml4XHJcbiAgICAgICAgICAgIGlmIChucy5wcmVmaXggPT09IHByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5zLm5hbWVzcGFjZSAhPT0gdXJpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3htbEVuY29kZXIoYzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYyA9PT0gJzwnICYmICcmbHQ7JyB8fFxyXG4gICAgICAgICAgICBjID09PSAnPicgJiYgJyZndDsnIHx8XHJcbiAgICAgICAgICAgIGMgPT09ICcmJyAmJiAnJmFtcDsnIHx8XHJcbiAgICAgICAgICAgIGMgPT09ICdcIicgJiYgJyZxdW90OycgfHxcclxuICAgICAgICAgICAgJyYjJyArIGMuY2hhckNvZGVBdCgwKSArICc7JztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG91dHB1dEluZGVudGVkKG9wdGlvbnM6IFhtbFNlcmlhbGl6ZXJPcHRpb25zLCBidWY6IHN0cmluZ1tdLCBpbmRlbnRMZXZlbDogbnVtYmVyLCAuLi5vdXRwdXRQYXJ0czogc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5iZWF1dGlmeSkge1xyXG4gICAgICAgICAgICBidWYucHVzaCgnXFxuJyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRlbnRMZXZlbCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKHRoaXMuaW5kZW50YXRpb25TdHJpbmcob3B0aW9ucywgaW5kZW50TGV2ZWwpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBidWYucHVzaCguLi5vdXRwdXRQYXJ0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRlbnRhdGlvblN0cmluZyhvcHRpb25zOiBYbWxTZXJpYWxpemVyT3B0aW9ucywgaW5kZW50TGV2ZWw6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgaW5kZW50ID0gKG9wdGlvbnMuaW5kZW50U3RyaW5nKSA/IG9wdGlvbnMuaW5kZW50U3RyaW5nIDogREVGQVVMVF9JTkRFTlRfU1RSSU5HO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGVudExldmVsOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgaW5kZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCwgd2V0aGVyIHRhZ05hbWUgaXMgYW4gZWxlbWVudCBjb250YWluaW5nIG1peGVkIGNvbnRlbnQuXHJcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSB0YWdOYW1lXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaXNNaXhlZENvbnRlbnRFbGVtZW50KHRhZ05hbWU6IHN0cmluZywgb3B0aW9uczogWG1sU2VyaWFsaXplck9wdGlvbnMpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1peGVkQ29udGVudEVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIW9wdGlvbnMubWl4ZWRDb250ZW50RWxlbWVudHMuZmluZCgodGFnKSA9PiB0YWcgPT09IHRhZ05hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250YWluc09ubHlXaGl0ZVNwYWNlKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjID0gdGV4dC5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgIGlmICghKGMgPT09ICcgJyB8fCBjID09PSAnXFx0JyB8fCBjID09PSAnXFxyJyB8fCBjID09PSAnXFxuJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=