import * as Tokenizr from 'tokenizr';
import { isNullOrUndefined } from 'util';
/**
 * Created by martin on 14.05.2017.
 * A tokenizer for normalized messages.
 */
// Tokens
export const TEXT = 'TEXT';
export const START_TAG = 'START_TAG';
export const END_TAG = 'END_TAG';
export const EMPTY_TAG = 'EMPTY_TAG';
export const PLACEHOLDER = 'PLACEHOLDER';
export const ICU_MESSAGE_REF = 'ICU_MESSAGE_REF';
export const ICU_MESSAGE = 'ICU_MESSAGE';
export class ParsedMesageTokenizer {
    getLexer() {
        const lexer = new Tokenizr();
        let plaintext = '';
        lexer.before((ctx, match, rule) => {
            if (rule.name !== TEXT && plaintext !== '') {
                ctx.accept(TEXT, { text: plaintext });
                plaintext = '';
            }
        });
        lexer.finish((ctx) => {
            if (plaintext !== '') {
                ctx.accept(TEXT, { text: plaintext });
            }
        });
        // empty tag, there are only a few allowed (see tag-mappings): ['BR', 'HR', 'IMG', 'AREA', 'LINK', 'WBR']
        // format is <name id="nr">, nr ist optional, z.B. <img> oder <img id="2">
        lexer.rule(/<(br|hr|img|area|link|wbr)( id="([0-9])*")?\>/, (ctx, match) => {
            const idcount = isNullOrUndefined(match[3]) ? 0 : parseInt(match[3], 10);
            ctx.accept(EMPTY_TAG, { name: match[1], idcounter: idcount });
        }, EMPTY_TAG);
        // start tag, Format <name id="nr">, nr ist optional, z.B. <mytag> oder <mytag id="2">
        lexer.rule(/<([a-zA-Z][a-zA-Z-0-9]*)( id="([0-9]*)")?>/, (ctx, match) => {
            const idcount = isNullOrUndefined(match[3]) ? 0 : parseInt(match[3], 10);
            ctx.accept(START_TAG, { name: match[1], idcounter: idcount });
        }, START_TAG);
        // end tag
        lexer.rule(/<\/([a-zA-Z][a-zA-Z-0-9]*)>/, (ctx, match) => {
            ctx.accept(END_TAG, { name: match[1] });
        }, END_TAG);
        // placeholder
        lexer.rule(/{{([0-9]+)}}/, (ctx, match) => {
            ctx.accept(PLACEHOLDER, { idcounter: parseInt(match[1], 10) });
        }, PLACEHOLDER);
        // icu message ref
        lexer.rule(/<ICU-Message-Ref_([0-9]+)\/>/, (ctx, match) => {
            ctx.accept(ICU_MESSAGE_REF, { idcounter: parseInt(match[1], 10) });
        }, ICU_MESSAGE_REF);
        // icu message
        lexer.rule(/<ICU-Message\/>/, (ctx, match) => {
            ctx.accept(ICU_MESSAGE, { message: match[0] });
        }, ICU_MESSAGE);
        // text
        lexer.rule(/./, (ctx, match) => {
            plaintext += match[0];
            ctx.ignore();
        }, TEXT);
        lexer.rule(/[\t\r\n]+/, (ctx, match) => {
            plaintext += match[0];
            ctx.ignore();
        }, TEXT);
        return lexer;
    }
    tokenize(normalizedMessage) {
        const lexer = this.getLexer();
        lexer.reset();
        lexer.input(normalizedMessage);
        return lexer.tokens();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VkLW1lc3NhZ2UtdG9rZW5pemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWkxOG5zdXBwb3J0LWxpYi9zcmMvaW1wbC9wYXJzZWQtbWVzc2FnZS10b2tlbml6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDckMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXZDOzs7R0FHRztBQUVILFNBQVM7QUFDVCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUNqQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO0FBQ3JDLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUM7QUFPekMsTUFBTSxPQUFPLHFCQUFxQjtJQUV0QixRQUFRO1FBQ1osTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUM3QixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDbkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxTQUFTLEtBQUssRUFBRSxFQUFFO2dCQUN4QyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO2dCQUNwQyxTQUFTLEdBQUcsRUFBRSxDQUFD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QUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDM0IsU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbkMsU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ1QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELFFBQVEsQ0FBQyxpQkFBeUI7UUFDOUIsTUFBTSxLQUFLLEdBQWEsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNkLEtBQUssQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUb2tlbml6ciBmcm9tICd0b2tlbml6cic7XHJcbmltcG9ydCB7aXNOdWxsT3JVbmRlZmluZWR9IGZyb20gJ3V0aWwnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZWQgYnkgbWFydGluIG9uIDE0LjA1LjIwMTcuXHJcbiAqIEEgdG9rZW5pemVyIGZvciBub3JtYWxpemVkIG1lc3NhZ2VzLlxyXG4gKi9cclxuXHJcbi8vIFRva2Vuc1xyXG5leHBvcnQgY29uc3QgVEVYVCA9ICdURVhUJztcclxuZXhwb3J0IGNvbnN0IFNUQVJUX1RBRyA9ICdTVEFSVF9UQUcnO1xyXG5leHBvcnQgY29uc3QgRU5EX1RBRyA9ICdFTkRfVEFHJztcclxuZXhwb3J0IGNvbnN0IEVNUFRZX1RBRyA9ICdFTVBUWV9UQUcnO1xyXG5leHBvcnQgY29uc3QgUExBQ0VIT0xERVIgPSAnUExBQ0VIT0xERVInO1xyXG5leHBvcnQgY29uc3QgSUNVX01FU1NBR0VfUkVGID0gJ0lDVV9NRVNTQUdFX1JFRic7XHJcbmV4cG9ydCBjb25zdCBJQ1VfTUVTU0FHRSA9ICdJQ1VfTUVTU0FHRSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRva2VuIHtcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIHZhbHVlOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJzZWRNZXNhZ2VUb2tlbml6ZXIge1xyXG5cclxuICAgIHByaXZhdGUgZ2V0TGV4ZXIoKTogVG9rZW5penIge1xyXG4gICAgICAgIGNvbnN0IGxleGVyID0gbmV3IFRva2VuaXpyKCk7XHJcbiAgICAgICAgbGV0IHBsYWludGV4dCA9ICcnO1xyXG4gICAgICAgIGxleGVyLmJlZm9yZSgoY3R4LCBtYXRjaCwgcnVsZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocnVsZS5uYW1lICE9PSBURVhUICYmIHBsYWludGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGN0eC5hY2NlcHQoVEVYVCwge3RleHQ6IHBsYWludGV4dH0pO1xyXG4gICAgICAgICAgICAgICAgcGxhaW50ZXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXhlci5maW5pc2goKGN0eCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGxhaW50ZXh0ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgY3R4LmFjY2VwdChURVhULCB7dGV4dDogcGxhaW50ZXh0fSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gZW1wdHkgdGFnLCB0aGVyZSBhcmUgb25seSBhIGZldyBhbGxvd2VkIChzZWUgdGFnLW1hcHBpbmdzKTogWydCUicsICdIUicsICdJTUcnLCAnQVJFQScsICdMSU5LJywgJ1dCUiddXHJcbiAgICAgICAgLy8gZm9ybWF0IGlzIDxuYW1lIGlkPVwibnJcIj4sIG5yIGlzdCBvcHRpb25hbCwgei5CLiA8aW1nPiBvZGVyIDxpbWcgaWQ9XCIyXCI+XHJcbiAgICAgICAgbGV4ZXIucnVsZSgvPChicnxocnxpbWd8YXJlYXxsaW5rfHdicikoIGlkPVwiKFswLTldKSpcIik/XFw+LywgKGN0eCwgbWF0Y2gpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaWRjb3VudCA9IGlzTnVsbE9yVW5kZWZpbmVkKG1hdGNoWzNdKSA/IDAgOiBwYXJzZUludChtYXRjaFszXSwgMTApO1xyXG4gICAgICAgICAgICBjdHguYWNjZXB0KEVNUFRZX1RBRywge25hbWU6IG1hdGNoWzFdLCBpZGNvdW50ZXI6IGlkY291bnR9KTtcclxuICAgICAgICB9LCBFTVBUWV9UQUcpO1xyXG4gICAgICAgIC8vIHN0YXJ0IHRhZywgRm9ybWF0IDxuYW1lIGlkPVwibnJcIj4sIG5yIGlzdCBvcHRpb25hbCwgei5CLiA8bXl0YWc+IG9kZXIgPG15dGFnIGlkPVwiMlwiPlxyXG4gICAgICAgIGxleGVyLnJ1bGUoLzwoW2EtekEtWl1bYS16QS1aLTAtOV0qKSggaWQ9XCIoWzAtOV0qKVwiKT8+LywgKGN0eCwgbWF0Y2gpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaWRjb3VudCA9IGlzTnVsbE9yVW5kZWZpbmVkKG1hdGNoWzNdKSA/IDAgOiBwYXJzZUludChtYXRjaFszXSwgMTApO1xyXG4gICAgICAgICAgICBjdHguYWNjZXB0KFNUQVJUX1RBRywge25hbWU6IG1hdGNoWzFdLCBpZGNvdW50ZXI6IGlkY291bnR9KTtcclxuICAgICAgICB9LCBTVEFSVF9UQUcpO1xyXG4gICAgICAgIC8vIGVuZCB0YWdcclxuICAgICAgICBsZXhlci5ydWxlKC88XFwvKFthLXpBLVpdW2EtekEtWi0wLTldKik+LywgKGN0eCwgbWF0Y2gpID0+IHtcclxuICAgICAgICAgICAgY3R4LmFjY2VwdChFTkRfVEFHLCB7bmFtZTogbWF0Y2hbMV19KTtcclxuICAgICAgICB9LCBFTkRfVEFHKTtcclxuICAgICAgICAvLyBwbGFjZWhvbGRlclxyXG4gICAgICAgIGxleGVyLnJ1bGUoL3t7KFswLTldKyl9fS8sIChjdHgsIG1hdGNoKSA9PiB7XHJcbiAgICAgICAgICAgIGN0eC5hY2NlcHQoUExBQ0VIT0xERVIsIHtpZGNvdW50ZXI6IHBhcnNlSW50KG1hdGNoWzFdLCAxMCl9KTtcclxuICAgICAgICB9LCBQTEFDRUhPTERFUik7XHJcbiAgICAgICAgLy8gaWN1IG1lc3NhZ2UgcmVmXHJcbiAgICAgICAgbGV4ZXIucnVsZSgvPElDVS1NZXNzYWdlLVJlZl8oWzAtOV0rKVxcLz4vLCAoY3R4LCBtYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBjdHguYWNjZXB0KElDVV9NRVNTQUdFX1JFRiwge2lkY291bnRlcjogcGFyc2VJbnQobWF0Y2hbMV0sIDEwKX0pO1xyXG4gICAgICAgIH0sIElDVV9NRVNTQUdFX1JFRik7XHJcbiAgICAgICAgLy8gaWN1IG1lc3NhZ2VcclxuICAgICAgICBsZXhlci5ydWxlKC88SUNVLU1lc3NhZ2VcXC8+LywgKGN0eCwgbWF0Y2gpID0+IHtcclxuICAgICAgICAgICAgY3R4LmFjY2VwdChJQ1VfTUVTU0FHRSwge21lc3NhZ2U6IG1hdGNoWzBdfSk7XHJcbiAgICAgICAgfSwgSUNVX01FU1NBR0UpO1xyXG4gICAgICAgIC8vIHRleHRcclxuICAgICAgICBsZXhlci5ydWxlKC8uLywgKGN0eCwgbWF0Y2gpID0+IHtcclxuICAgICAgICAgICAgcGxhaW50ZXh0ICs9IG1hdGNoWzBdO1xyXG4gICAgICAgICAgICBjdHguaWdub3JlKCk7XHJcbiAgICAgICAgfSwgVEVYVCk7XHJcbiAgICAgICAgbGV4ZXIucnVsZSgvW1xcdFxcclxcbl0rLywgKGN0eCwgbWF0Y2gpID0+IHtcclxuICAgICAgICAgICAgcGxhaW50ZXh0ICs9IG1hdGNoWzBdO1xyXG4gICAgICAgICAgICBjdHguaWdub3JlKCk7XHJcbiAgICAgICAgfSwgVEVYVCk7XHJcbiAgICAgICAgcmV0dXJuIGxleGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHRva2VuaXplKG5vcm1hbGl6ZWRNZXNzYWdlOiBzdHJpbmcpOiBUb2tlbltdIHtcclxuICAgICAgICBjb25zdCBsZXhlcjogVG9rZW5penIgPSB0aGlzLmdldExleGVyKCk7XHJcbiAgICAgICAgbGV4ZXIucmVzZXQoKTtcclxuICAgICAgICBsZXhlci5pbnB1dChub3JtYWxpemVkTWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuIGxleGVyLnRva2VucygpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=